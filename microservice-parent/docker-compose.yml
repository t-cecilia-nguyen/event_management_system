# ------------------------------------------------------------------------------------------
# 1. docker-compose -p microservices-event-booking -f docker-compose.yml up -d
#     -- This command will start the containers in detached mode without rebuilding the images (if they already exist)
#
# 2. docker-compose -p microservices-event-booking -f docker-compose.yml up -d --build
#     -- This command forces the rebuild of images, even if the images already exist, before starting the containers
#-------------------------------------------------------------------------------------------
version: '4.0'

services:

  ###########################
  # ROOM SERVICE CONTAINERS #
  ###########################

  room-service:
    image: room-service
    container_name: room-service
    ports:
      - "8095:8095"
    build:
      context: ./room-service
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - room-postgres
    networks:
      - spring

  room-postgres:
    image: postgres:latest
    container_name: room-postgres
    ports:
      - "5439:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/postgres/rooms:/var/lib/postgresql/data
      - ./local-docker-file/postgres/init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring
    restart: unless-stopped

  ##############################
  # BOOKING SERVICE CONTAINERS #
  ##############################

  booking-service:
    image: booking-service
    ports:
      - "8086:8086"
    build:
      context: ./booking-service
      dockerfile: ./Dockerfile
    container_name: booking-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - booking-mongodb
    networks:
      - spring

  booking-mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/bookings:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-booking-init.js:/docker-entrypoint-initdb.d/mongo-booking-init.js:ro  # Initialize MongoDB with data from this script
    container_name: booking-mongodb
    networks:
      - spring

  booking-mongo-express:
    image: mongo-express
    ports:
      - "8079:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=booking-mongodb
    container_name: booking-mongo-express
    depends_on:
      - booking-mongodb
    networks:
      - spring

  ###########################
  # USER SERVICE CONTAINERS #
  ###########################

  user-service:
    image: user-service
    container_name: user-service
    ports:
      - "8097:8097"
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - user-postgres
    networks:
      - spring

  user-postgres:
    image: postgres:latest
    container_name: user-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/postgres/users:/var/lib/postgresql/data
      - ./local-docker-file/postgres/init/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring
    restart: unless-stopped

  ############################
  # EVENT SERVICE CONTAINERS #
  ############################

  event-service:
    image: event-service
    ports:
      - "8098:8098"
    build:
      context: ./event-service
      dockerfile: ./Dockerfile
    container_name: event-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb-event-service
    networks:
      - spring

  mongodb-event-service:
    image: mongo:latest
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/events:/data/db
      - ./local-docker-file/mongo/init/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    container_name: mongodb-event-service
    networks:
      - spring

  mongo-express-event:
    image: mongo-express
    ports:
      - "8083:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb-event-service
    container_name: mongo-express-event
    depends_on:
      - mongodb-event-service
    networks:
      - spring

  ###############################
  # APPROVAL SERVICE CONTAINERS #
  ###############################

  approval-service:
    image: approval-service
    container_name: approval-service
    ports:
      - "8087:8087" # Map to the desired port for the approval service
    build:
      context: ./approval-service
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - approval-mongo
      - user-service # Add user-service dependency if needed
    networks:
      - spring

  approval-mongo:
    image: mongo:latest
    container_name: approval-mongo
    ports:
      - "27020:27017"
    volumes:
      - ./data/mongo/approvals:/data/db   # localhost-hard-drive:virtual-logical-drive( virtual inside containerize environment)
      - ./mongo/init/docker-entrypoint-initdb.d/mongo-approval-init.js:/docker-entrypoint-initdb.d/mongo-approval-init.js:ro
    networks:
      - spring
    environment: # read from documentation
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    restart: unless-stopped

  mongo-express:
    image: mongo-express
    container_name: mongo-express-a2
    ports:
      - "8091:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=approval-mongo
      - ME_CONFIG_MONGODB_PORT=27020
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    networks:
      - spring
    restart: unless-stopped

  ###########
  # PGADMIN #
  ###########

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-event-booking
    ports:
      - "8889:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - spring
    restart: unless-stopped

  ###############
  # API GATEWAY #
  ###############

  api-gateway:
    image: api-gateway
    ports:
      - "9000:9000"
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    container_name: api-gateway-a2
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring

  ############
  # KEYCLOAK #
  ############

  keycloak:
    container_name: keycloak-a2
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./local-docker-file/realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432"
    container_name: postgres-keycloak-a2
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    networks:
      - spring

  #########
  # KAFKA #
  #########

  zookeeper:
    container_name: zookeeper-a2
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  broker:
    container_name: broker-a2
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring

  kafka-ui:
    container_name: kafka-ui-a2
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8099:8099"
    environment:
      KAFKA_CLUSTER_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
      SERVER_PORT: 8099
    depends_on:
      - broker
    networks:
      - spring

  ####################
  # VOLUMES SECTION #
  ###################

volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge

